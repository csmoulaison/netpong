GENERAL FPS NETWORKING
======================
Client side prediction and server reconciliation:
- On input, provide immediate feedback by simulating on the client side. At the same time, send input and tick counter to the server.
- The server simulates based on input and sends the result back to the client.
- The client is in the present, and receives a packet *from the past*. The client rolls back to this most recent packet, and resimulates up to its present with the new, often identical, information.

Entity interpolation:
- For objects which the client can't extrapolate - highly articulate movement of other players or bots, for instance - the client is always seeing these other objects on a delay. This is the buffer which needs to be large enough that we can most always interpolate towards it.

Lag compensation:
- High accuracy actions, like a headshot, won't work under this entity interpolation model, because you are always shooting at an entity whose position is actually out of date according to the server.
- Because the server knows all relevant past inputs with timestamps, it can determine what your present looked like at the point you shot your gun, and honor the shot if it was correctly aimed from your point of view.
- The downside: an enemy can be shot even after they hid behind a wall, within a certain time range. I believe this issue is what is being discussed in the riot games article. Might be worth a reread after we are all through.

OUR NETWORKING
==============
Client side prediction of ALL entities:

Server side buffering, 
