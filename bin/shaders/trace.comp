#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) buffer in_color_buffer
{
	float colors[];
} color_buffer;

// P(t) = O + tD, where O is the origin and D is the direction.
struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Sphere
{
	vec3 center;
	float radius;
};

layout(std140, binding = 1) uniform in_ubo
{
	Sphere sphere;
	vec3 camera_position;
	float time;
} ubo;

struct Hit
{
	bool intersecting;
	vec3 point;
	vec3 normal;
};

float random_float()
{
	return fract(sin(ubo.time * (gl_LocalInvocationID.x + 1) * (gl_LocalInvocationID.y + 1)) * 1000000.0) / 1.5707;
}

Hit sphere_intersect(Ray ray, Sphere sphere)
{
	Hit not_hit = Hit(false, vec3(0), vec3(0));

	float t0 = 0;
	float t1 = 0;

	vec3 l = sphere.center - ray.origin;
	float tca = dot(l, ray.direction);
	float d2 = dot(l, l) - tca * tca;
	if(d2 > sphere.radius * sphere.radius) 
		return not_hit;
	float thc = sqrt(sphere.radius * sphere.radius - d2);

	t0 = tca - thc;
	t1 = tca + thc;
	if(t0 > t1)
	{
		float tmp = t0;
		t0 = t1;
		t1 = tmp;
	}
	if(t0 < 0)
	{
		t0 = t1;
		if(t0 < 0) return not_hit;
	}

	vec3 point = ray.origin + ray.direction * t0;
	vec3 normal = normalize(point - sphere.center);
	return Hit(true, point, normal);
}

void main()
{
	ivec2 invocation = ivec2(gl_LocalInvocationID.xy);
	int buffer_index = invocation.y * 16 + invocation.x;

	vec2 screen = vec2(invocation.x - 0.5f + random_float() / 10.0f, invocation.y - 0.5f + random_float() / 10.0f);

	float fov = 1;
	float width = gl_NumWorkGroups.x;
	float height = gl_NumWorkGroups.y;
	float x =  (2.0 * (screen.x + 0.5) / width  - 1) * tan(fov / 2.0) * width / height;
	float y = -(2.0 * (screen.y + 0.5) / height - 1) * tan(fov / 2.0);
	Ray ray = Ray(ubo.camera_position, normalize(vec3(x, y, -1)));

	Sphere sphere = Sphere(vec3(0.0, 0.0, -3), 1);

	float color = 0.0f;
	Hit hit = sphere_intersect(ray, sphere);
	if(hit.intersecting)
	{
		vec3 light_position = vec3(-20.0f, -20.0f, 30.0f);
		vec3 light_direction = normalize(light_position - hit.point);
		color = clamp(dot(light_direction, hit.normal), 0.0f, 1.0f);
	}
	else
	{
		color = 0.0f;
	}
	color += random_float() * 0.02f;

	// NOW - this loop is only here because we aren't populating all colors yet.
	for(int i = 0; i < 16; i++)
	{
		color_buffer.colors[buffer_index + 256 * i] = color;
	}
}
